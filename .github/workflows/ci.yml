name: CI - Tests & Code Quality

on:
  push:
    branches: [ main, develop, api ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Tests unitaires et d'intégration
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.6.0'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Verify dependencies
      run: flutter doctor -v

    - name: Create .env file for tests
      run: |
        echo "API_BASE_URL=http://127.0.0.1:8000/api" > .env
        echo "ENVIRONMENT=test" >> .env
        echo "ENABLE_LOGGING=true" >> .env

    - name: Run analyzer
      run: flutter analyze --fatal-infos

    - name: Run unit tests
      run: flutter test --coverage --reporter=expanded

    - name: Run integration tests
      run: |
        flutter test test/api_integration_test.dart --reporter=expanded
        flutter test test/backend_connectivity_test.dart --reporter=expanded
        flutter test test/integration_complete_test.dart --reporter=expanded

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job 2: Code Quality & Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.6.0'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Check formatting
      run: dart format --set-exit-if-changed lib/ test/

    - name: Run static analysis
      run: flutter analyze --fatal-warnings

    - name: Check for unused dependencies
      run: |
        dart pub deps
        flutter pub deps

  # Job 3: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.6.0'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Run security audit
      run: |
        dart pub audit
        echo "Checking for sensitive data in source files..."
        if grep -r "password\|secret\|key" lib/ --include="*.dart" | grep -v "// TODO\|// FIXME"; then
          echo "⚠️  Potential sensitive data found in source files"
          exit 1
        fi
        echo "✅ No sensitive data found in source files"

  # Job 4: Build validation (compilation uniquement)
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, quality]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.6.0'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Create .env file
      run: |
        echo "API_BASE_URL=https://api.blooddonation.com/api" > .env
        echo "ENVIRONMENT=production" >> .env
        echo "ENABLE_LOGGING=false" >> .env

    - name: Build APK (validation only)
      run: flutter build apk --debug --verbose

    - name: Build Web (validation only)
      run: flutter build web --debug --verbose

  # Job 5: Notifications et rapports
  notification:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, quality, security, build-validation]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "Test result: ${{ needs.test.result }}"
        echo "Quality result: ${{ needs.quality.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "Build validation result: ${{ needs.build-validation.result }}"
        
        if [ "${{ needs.test.result }}" = "failure" ] || [ "${{ needs.quality.result }}" = "failure" ] || [ "${{ needs.security.result }}" = "failure" ] || [ "${{ needs.build-validation.result }}" = "failure" ]; then
          echo "❌ CI pipeline failed"
          exit 1
        else
          echo "✅ All CI checks passed successfully"
        fi